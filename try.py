from mint_config import all_programs, chosen_programs, defaults, all_configs, config_step_types, chosen_configs
from dir_config import default_folders, logfile, logfolder
from subprocess import STDOUT, check_call
from shutil import copyfile
import datetime
#from types import *

import logging
import pdb
import os
import re, tempfile, shutil #for the replace function


def exist_create_file(filename):
    if not os.path.exists(filename):
        file = open(filename,'w+')
        comment_char = '#'
        file.write(comment_char + ' file automatically generated by bootstrap script')
        file.close

def backup_file(filename):
    bkpname=filename + '.backup'
    if not os.path.exists(bkpname):
        shutil.copyfile(filename, bkpname)
    else:
        bkpfolder=bkpname+'s'
        exist_create_folder(bkpfolder)
        shutil.copyfile(filename, bkpfolder + '/' +datetime.datetime.now().strftime("%Y-%m-%d_%H:%M"))
        
def exist_create_folder(folderpath):
    if not os.path.exists(folderpath):
        os.makedirs(folderpath)

        
class bashcommand:

    def __init__(self,s=''):
        self.command = s

    def __add__(self, other):
        if type(other) is str:
            self.command += ' ' + other
            return
        if type(other) is list:
            self.command += ' ' + ' '.join(l)
            return

    def run(self, choseprintlog=False):
        logging.info(self.command)
        self.stdlog = os.popen(self.command)
        for l in self.stdlog:
            pastestring = '\t \t' + l.replace('\n','')
            logging.debug(pastestring)
        if choseprintlog:
            self.printlog()

    def printlog(self):
        print(self.stdlog)
        for l in self.stdlog:
            print(l,end="")


class stuff_to_do:

    def __init__(self,kind,config_dic,default_dic):
        self.kind = kind
        self.config_dic = config_dic
        self.default_dic = default_dic
    
    def get_attr(self, attr, dictionary=False, defaults=False):
        if dictionary == False:
            dictionary = self.config_dic
        if defaults == False:
            defaults = self.default_dic
        if attr in dictionary:
            return dictionary[attr]
        else:
            try:
                return defaults[attr]
            except KeyError:
                logging.warning('warning: get_attr raised on a non-defaulted attribute %s',attr)
                return False

            
class program(stuff_to_do):

    def __init__(self,name):
        self.name = name
        super().__init__('program', all_programs[name] ,defaults)

    def build_install_command(self):
        l = []
        realname=self.name
        if 'aka' in self.config_dic:
            realname = self.get_attr('aka')
        for i in ['is_sudo','install_command']:
            l.append(self.get_attr(i))
        l.append(realname)
        return ' '.join(l)

    def run_install(self):
        logging.debug('installing   '+self.name)
        installer = bashcommand(self.build_install_command())
        installer.run()


    def add_repo(self):
        repo = self.get_attr('repo')
        if repo == defaults['repo']:
            return
        else:
            logging.debug('Adding repo   ' + repo)
            pre = self.get_attr('repo_prequel')
            #pdb.set_trace()
            for c in pre:
                command = bashcommand(c)
                command.run
            repo_adder = bashcommand(self.get_attr('repo_add_command'))
            repo_adder + repo
            repo_adder.run()
            #pdb.set_trace()
            updater = bashcommand(self.get_attr('repo_update_command'))
            updater.run()

    def install(self):
        self.add_repo()
        self.run_install()
        self.prog_config()


    def prog_config(self):
        c = self.get_attr('config')
        if c == defaults['config']:
            return
        else:
            conf = configuration(c)
            conf.run_all_steps()
    

class configuration(stuff_to_do):

    def __init__(self,name):
        self.name = name
        super().__init__('config', all_configs[name] ,defaults)


    def check_steps(self):
        for s in self.config_dic:
            assert s['type'] in config_step_types, 'error, command type not allowed'
            if s['type'] not in config_step_types:
                   return 'error, command type not allowed'
        return

    def run_step(self,step):
        if step['type'] == 'bash_command':
            command = bashcommand(step['content'])
            command.run()
        if step['type'] == 'make_dir':
            content = step['content']
            directory = '/'
            for c in content:
                path_steps = self.get_attr(c,default_folders)
                if path_steps:
                    for s in path_steps:
                        directory = os.path.join(directory,s)
                else:
                    directory = os.path.join(directory,c)
            if not os.path.exists(directory):
                os.makedirs(directory)
        if step['type'] == 'change_add_line':
            self.change_add_line( step['content']['file'], step['content']['regex'], step['content']['newline'])
                        
    def change_add_line(self, filename, match_regex, newline):
        exist_create_file(filename)
        backup_file(filename)
        r = re.compile(match_regex)
        need_to_add = True
        #temp file
        fh, abs_path = tempfile.mkstemp()
        with open(abs_path,'w') as new_file:
            with open(filename) as old_file:
                for line in old_file:
                    if r.match(line):
                        new_file.write(r.sub(newline,line))
                        need_to_add = False
                    else:
                        new_file.write(line)
                if need_to_add:
                    new_file.write("\n")
                    new_file.write(newline)
                    new_file.write("\n")
        os.close(fh)
        shutil.copy(abs_path, filename)
        

            
    def run_all_steps(self):
        self.check_steps()
        for s in self.config_dic:
            logging.debug('running step   ' + s['type'])
            self.run_step(s)



print(logfolder)
logfile_full_path = logfolder + logfile
exist_create_folder(logfolder)
exist_create_file(logfile_full_path)
print(logfile_full_path)
logging.basicConfig( filename=logfile_full_path, level=logging.DEBUG, format='%(levelname)s \t    %(message)s')


logging.info('\n')
logging.info('Begin programs installation: \n')        
for p in chosen_programs:
    prog = program(p)
    logging.info('\n')
    logging.info('Installing--> ' + prog.name)
    prog.install()

logging.info('\n')
logging.info('Begin stand-alone configs: \n')        
for c in chosen_configs:
    conf = configuration(c)
    logging.info('\n')
    logging.info('Configuring--> ' + conf.name)
    conf.run_all_steps()
    
